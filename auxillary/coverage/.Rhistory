theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self, group = as.factor(Millimolar))) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self), group = Millimolar)) +
geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self, group = as.factor(Millimolar))) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self, group = as.factor(Millimolar))) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self, group = as.factor(Millimolar))) +
geom_line(aes(y = mean(Normalized.Self))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(y = mean(Normalized.Self))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(y = Normalized.Self)) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(y = Normalized.Self, group = Millimolar)) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(y = Normalized.Self, group = mean(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = Millimolar, y = Normalized.Self, group = mean(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = Normalized.Self, group = mean(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = Normalized.Self, group = mean(as.factor(Millimolar)))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
# set directory containing output
exp <- "20180905"
filedir <- paste0("~/Box Sync/ZamanianLab/Data/WormvizOutput/Bpahangi/", exp)
setwd(filedir)
plate_design <- read.csv("plate_design.csv", header = FALSE, sep = ",")
raw_data <- lapply(list.files(pattern = ".*_data.csv$", recursive = TRUE), read.csv, header = TRUE, sep = ",")
experiment <- c("37_B", "37_C", "RT-5M_A", "RT-5M_B", "RT-5M_C", "RT-PRE", "RT-POST")
get_data <- function(raw_data, experiment) {
# organize experimental parameters
colnames(plate_design) <- c("row","0001","0002","0003","0004","0005","0006","0007","0008","0009","0010","0011","0012")
plate_design <- plate_design %>% slice(2:9)
plate.m <- plate_design %>%
gather(col, Treatment, 2:13) %>%
mutate(Well = paste0(row, col)) %>%
select(-row, -col) %>%
separate(Treatment, c("Drug", "Molar", "Rep"), sep = "_", remove = FALSE)
# organize data
raw_data %<>% select(Well, Motility = Normalized.Motility) %>%
left_join(., plate.m) %>%
mutate(Temperature = experiment)
#normalize to control
all_data <- mutate(raw_data, Normalized.Control = Motility / mean(dplyr::filter(raw_data, Drug == "CON")$Motility))
}
# run function on all experiments, merge data frames, normalize to first video of self, and remove NAs
result <- mapply(get_data, raw_data, experiment, SIMPLIFY = FALSE)
all_data <- reduce(result, bind_rows) %>%
dplyr::filter(!is.na(Treatment)) %>%
group_by(Temperature, Drug, Molar)
# get mean motility for each pre-treatment replicate
summary <- summarise(all_data, Mean = mean(Motility)) %>%
dplyr::filter(Temperature == "RT-PRE") %>%
ungroup() %>%
dplyr::select(-Temperature, RT.PRE.Mean = Mean)
# normalize to itself by dividing each replicate by the pre-treatment mean
all_data %<>% left_join(., summary) %>%
mutate(Normalized.Self = Motility / RT.PRE.Mean)
# convert from molar to millimolar
lookup <- data.frame(Molar = c("NA", "10-1", "10-2", "10-3", "10-4", "10-5", "10-6"),
Millimolar = c(0.001, 100, 10, 1, .1, 0.01, 0.001))
all_data %<>% left_join(., lookup) %>%
group_by(Drug, Temperature, Millimolar)
# plot
plot1 <- ggplot(all_data, aes(x = Millimolar, y = Normalized.Control)) +
geom_boxplot(aes(group = Millimolar), alpha = 0.6) +
geom_point() +
# geom_smooth(method = loess, se = FALSE) +
scale_x_log10(limits = c(0.0004, 303),
breaks = c(0.001, 0.01, 0.1, 1, 100),
labels = c("Control", "0.01", "0.1", "1", "100")) +
scale_y_continuous(limits = c(0.5, 5.5)) +
labs(x = "Drug Concentration (mM)", y = "Normalized Optical Flow (Percent of Control)") +
facet_grid(Temperature ~ .) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank()) +
NULL
plot1
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = Normalized.Self, group = mean(as.factor(Millimolar)))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self), group = as.factor(Millimolar)) +
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self), group = as.factor(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self), group = as.factor(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self)) +
geom_line(aes(color = as.factor(Millimolar), y = Normalized.Self, group = as.factor(Millimolar))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, y = Normalized.Self, group = as.factor(Millimolar))) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, group = as.factor(Millimolar))) +
geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
# geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, group = as.factor(Millimolar))) +
# geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
geom_point(aes(color = as.factor(Millimolar), y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, group = as.factor(Millimolar), color = as.factor(Millimolar))) +
# geom_line(aes(color = as.factor(Millimolar), y = mean(Normalized.Self))) +
geom_point(aes(y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
View(summary)
mean <- summary(all_data, Mean = mean(Normalized.Self))
mean <- summarise(all_data, Mean = mean(Normalized.Self))
View(summary)
View(all_data)
plot_data %<>% left_join(all_data, lookup) %>% ungroup()
plot_data <- left_join(all_data, lookup) %>% ungroup()
plot_data <- left_join(all_data, lookup) %>%
ungroup() %>%
group_by(Drug, Temperature, Millimolar)
View(plot_data)
mean <- summarise(plot_data, Mean = mean(Normalized.Self))
View(mean)
plot2 <- ggplot(all_data, aes(x = Temperature, group = as.factor(Millimolar), color = as.factor(Millimolar))) +
geom_line(data = mean, aes(color = as.factor(Millimolar), y = Normalized.Self)) +
geom_point(aes(y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
plot2 <- ggplot(all_data, aes(x = Temperature, group = as.factor(Millimolar), color = as.factor(Millimolar))) +
geom_line(data = mean, aes(color = as.factor(Millimolar), y = Mean)) +
geom_point(aes(y = Normalized.Self)) +
scale_x_discrete(limits = c("RT-PRE", "RT-POST", "RT-5M_A", "37_B", "RT-5M_B", "37_C", "RT-5M_C")) +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.text.x =  element_text(angle = 90, vjust = 0.5)) +
NULL
plot2
library(ggridges)
library(viridis)
library(cowplot)
library(data.table)
library(stats)
library(ggrepel)
library(tidyverse)
# Script for generating figures for Bge genome manuscript
#########################################################################################################
######################                                                             ######################
######################                        Figure 1                             ######################
######################                                                             ######################
#########################################################################################################
setwd("~/GitHub/BgeVars/auxillary/coverage")
load("snail.summ.data.rda")
setwd("~/GitHub/BgeVars/auxillary/coverage/")
load("snail.summ.data.rda")
load("~/Box Sync//GitHub/BgeVars/auxillary/coverage/snail.summ.data.rda")
load("~/Box Sync//GitHub/BgeVars/auxillary/coverage/bge.summ.data.rda")
snail.df <- snail.summ.data
bge.df <- bge.summ.data
# rename columns to prepare for merging
colnames(snail.df)[2] <- "Snail_Scaffold_Coverage"
colnames(bge.df)[2] <- "Bge_Scaffold_Coverage"
# merge data into a single data frame
merge.df <- left_join(bge.df, snail.df)
# add linkage group (LG) information as a new column, prepare by renaming Scaffolds to match with scaffold_mapping.txt
name <- strsplit(as.character(merge.df$Scaffold), split = "_")
name <- matrix(unlist(name), ncol = 3, byrow = TRUE)
name <- data.frame(name)
merge.df$Scaffold <- name$X3
LG_mapping <- read.table("scaffold_mapping.txt", sep = " ", header = TRUE)
all.df <- left_join(merge.df, LG_mapping)
# Change NAs to "Other"
all.df$LGs <- as.character(all.df$LGs)
all.df$LGs[is.na(all.df$LGs)] <- "Other"
# Add new group, "Ambiguous", as those contigs that map to multiple LGs
all.df$LGs <- gsub(".*,.*", "Ambiguous", all.df$LGs)
# normalize coverage measurements
all.df.norm <- dplyr::select(all.df, Scaffold, Scaffold_Length, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, LGs) %>%
mutate(Snail_Scaffold_Coverage_Norm = Snail_Scaffold_Coverage * Scaffold_Length / sum(Snail_Scaffold_Coverage*Scaffold_Length)) %>%
mutate(Bge_Scaffold_Coverage_Norm = Bge_Scaffold_Coverage * Scaffold_Length / sum(Bge_Scaffold_Coverage*Scaffold_Length))
all.df.norm.m <- gather(all.df.norm, key = Coverage_Type, value = Value, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, Snail_Scaffold_Coverage_Norm, Bge_Scaffold_Coverage_Norm) %>%
separate(Coverage_Type, into = c("ID", "Coverage_Type"), sep = "_Scaffold_Coverage")
dot.df <- dplyr::select(all.df.norm, -Bge_Scaffold_Coverage_Norm, -Snail_Scaffold_Coverage_Norm)
# remove small scaffolds and LGs that aren't the largest 18
dot.m <- dot.df %>%
filter(Scaffold_Length > 10000) %>%
arrange(LGs) %>% group_by(LGs) %>%
mutate(Index = row_number()) %>%
melt(id = c("Scaffold", "Scaffold_Length", "LGs", "Index")) %>%
filter(!LGs %in% c("LGs", "LGt", "LGu", "LGv", "LGw", "LGx", "Ambiguous", "Other"))
# calculate summary statistics
dot.summ <- dot.m %>%
group_by(LGs, variable) %>%
summarise(med = median(value), ave = sum(Scaffold_Length * value) / sum(Scaffold_Length)) %>%
mutate(lm = log2(med))
# prepare for plotting
bge.dot.summ <- subset(dot.summ, variable == "Bge_Scaffold_Coverage")
linkage_order <- dot.summ %>%
arrange(desc(ave)) %>%
filter(variable == "Bge_Scaffold_Coverage")
linkage_order <- linkage_order$LGs
dot.m$LGs <- factor(dot.m$LGs, levels = c(linkage_order))
# plot
fig1 <- ggplot(data = subset(dot.m, variable == "Bge_Scaffold_Coverage"), aes(x = LGs, y = value, group = LGs)) +
geom_jitter(aes(alpha = 0.6, color = "black")) +
facet_wrap(~ LGs, scale = "free_x", nrow = 1) +
geom_hline(data = subset(dot.summ, variable == "Bge_Scaffold_Coverage"),
color = "black",
aes(yintercept = ave)) +
geom_label(data = bge.dot.summ,
size = 2.5,
aes(x = LGs, y = -5, label = plyr::round_any(ave, 0.001, ceiling))) +
ylim(-10, 250) +
labs(y = "Coverage") +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
fig1
load("~/Box Sync//GitHub/BgeVars/auxillary/coverage/snail.summ.data.rda")
load("~/Box Sync//GitHub/BgeVars/auxillary/coverage/bge.summ.data.rda")
snail.df <- snail.summ.data
bge.df <- bge.summ.data
# rename columns to prepare for merging
colnames(snail.df)[2] <- "Snail_Scaffold_Coverage"
colnames(bge.df)[2] <- "Bge_Scaffold_Coverage"
# merge data into a single data frame
merge.df <- left_join(bge.df, snail.df)
# add linkage group (LG) information as a new column, prepare by renaming Scaffolds to match with scaffold_mapping.txt
name <- strsplit(as.character(merge.df$Scaffold), split = "_")
name <- matrix(unlist(name), ncol = 3, byrow = TRUE)
name <- data.frame(name)
merge.df$Scaffold <- name$X3
LG_mapping <- read.table("scaffold_mapping.txt", sep = " ", header = TRUE)
LG_mapping <- read.table("~/Box Sync//GitHub/BgeVars/auxillary/coverage/scaffold_mapping.txt", sep = " ", header = TRUE)
all.df <- left_join(merge.df, LG_mapping)
# Change NAs to "Other"
all.df$LGs <- as.character(all.df$LGs)
all.df$LGs[is.na(all.df$LGs)] <- "Other"
# Add new group, "Ambiguous", as those contigs that map to multiple LGs
all.df$LGs <- gsub(".*,.*", "Ambiguous", all.df$LGs)
# normalize coverage measurements
all.df.norm <- dplyr::select(all.df, Scaffold, Scaffold_Length, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, LGs) %>%
mutate(Snail_Scaffold_Coverage_Norm = Snail_Scaffold_Coverage * Scaffold_Length / sum(Snail_Scaffold_Coverage*Scaffold_Length)) %>%
mutate(Bge_Scaffold_Coverage_Norm = Bge_Scaffold_Coverage * Scaffold_Length / sum(Bge_Scaffold_Coverage*Scaffold_Length))
all.df.norm.m <- gather(all.df.norm, key = Coverage_Type, value = Value, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, Snail_Scaffold_Coverage_Norm, Bge_Scaffold_Coverage_Norm) %>%
separate(Coverage_Type, into = c("ID", "Coverage_Type"), sep = "_Scaffold_Coverage")
dot.df <- dplyr::select(all.df.norm, -Bge_Scaffold_Coverage_Norm, -Snail_Scaffold_Coverage_Norm)
# remove small scaffolds and LGs that aren't the largest 18
dot.m <- dot.df %>%
filter(Scaffold_Length > 10000) %>%
arrange(LGs) %>% group_by(LGs) %>%
mutate(Index = row_number()) %>%
melt(id = c("Scaffold", "Scaffold_Length", "LGs", "Index")) %>%
filter(!LGs %in% c("LGs", "LGt", "LGu", "LGv", "LGw", "LGx", "Ambiguous", "Other"))
# calculate summary statistics
dot.summ <- dot.m %>%
group_by(LGs, variable) %>%
summarise(med = median(value), ave = sum(Scaffold_Length * value) / sum(Scaffold_Length)) %>%
mutate(lm = log2(med))
# prepare for plotting
bge.dot.summ <- subset(dot.summ, variable == "Bge_Scaffold_Coverage")
linkage_order <- dot.summ %>%
arrange(desc(ave)) %>%
filter(variable == "Bge_Scaffold_Coverage")
all.df.norm <- dplyr::select(all.df, Scaffold, Scaffold_Length, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, LGs) %>%
mutate(Snail_Scaffold_Coverage_Norm = Snail_Scaffold_Coverage * Scaffold_Length / sum(Snail_Scaffold_Coverage*Scaffold_Length)) %>%
mutate(Bge_Scaffold_Coverage_Norm = Bge_Scaffold_Coverage * Scaffold_Length / sum(Bge_Scaffold_Coverage*Scaffold_Length))
all.df.norm.m <- gather(all.df.norm, key = Coverage_Type, value = Value, Snail_Scaffold_Coverage, Bge_Scaffold_Coverage, Snail_Scaffold_Coverage_Norm, Bge_Scaffold_Coverage_Norm) %>%
separate(Coverage_Type, into = c("ID", "Coverage_Type"), sep = "_Scaffold_Coverage")
dot.df <- dplyr::select(all.df.norm, -Bge_Scaffold_Coverage_Norm, -Snail_Scaffold_Coverage_Norm)
# remove small scaffolds and LGs that aren't the largest 18
dot.m <- dot.df %>%
dplyr::filter(Scaffold_Length > 10000) %>%
arrange(LGs) %>% group_by(LGs) %>%
mutate(Index = row_number()) %>%
melt(id = c("Scaffold", "Scaffold_Length", "LGs", "Index")) %>%
filter(!LGs %in% c("LGs", "LGt", "LGu", "LGv", "LGw", "LGx", "Ambiguous", "Other"))
# remove small scaffolds and LGs that aren't the largest 18
dot.m <- dot.df %>%
dplyr::filter(Scaffold_Length > 10000) %>%
arrange(LGs) %>% group_by(LGs) %>%
mutate(Index = row_number()) %>%
melt(id = c("Scaffold", "Scaffold_Length", "LGs", "Index")) %>%
dplyr::filter(!LGs %in% c("LGs", "LGt", "LGu", "LGv", "LGw", "LGx", "Ambiguous", "Other"))
# calculate summary statistics
dot.summ <- dot.m %>%
group_by(LGs, variable) %>%
summarise(med = median(value), ave = sum(Scaffold_Length * value) / sum(Scaffold_Length)) %>%
mutate(lm = log2(med))
# prepare for plotting
bge.dot.summ <- subset(dot.summ, variable == "Bge_Scaffold_Coverage")
linkage_order <- dot.summ %>%
arrange(desc(ave)) %>%
filter(variable == "Bge_Scaffold_Coverage")
linkage_order <- dot.summ %>%
arrange(desc(ave)) %>%
dplyr::filter(variable == "Bge_Scaffold_Coverage")
linkage_order <- linkage_order$LGs
dot.m$LGs <- factor(dot.m$LGs, levels = c(linkage_order))
# plot
fig1 <- ggplot(data = subset(dot.m, variable == "Bge_Scaffold_Coverage"), aes(x = LGs, y = value, group = LGs)) +
geom_jitter(aes(alpha = 0.6, color = "black")) +
facet_wrap(~ LGs, scale = "free_x", nrow = 1) +
geom_hline(data = subset(dot.summ, variable == "Bge_Scaffold_Coverage"),
color = "black",
aes(yintercept = ave)) +
geom_label(data = bge.dot.summ,
size = 2.5,
aes(x = LGs, y = -5, label = plyr::round_any(ave, 0.001, ceiling))) +
ylim(-10, 250) +
labs(y = "Coverage") +
theme_bw(base_size = 16, base_family = "Helvetica") +
theme(legend.position = "none",
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
fig1
save_plot("Fig1.pdf", fig1, base_width = 18, base_aspect_ratio = .5, units = "in")
save_plot("Fig1.png", fig1, base_width = 18, base_aspect_ratio = .5, units = "in")
setwd("~/Box Sync/GitHub/BgeVars/auxillary/coverage/")
save_plot("Fig1.pdf", fig1, base_width = 18, base_aspect_ratio = .5, units = "in")
save_plot("Fig1.png", fig1, base_width = 18, base_aspect_ratio = .5, units = "in")
